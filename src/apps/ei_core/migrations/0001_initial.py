# Generated by Django 4.2.4 on 2024-09-10 17:47

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': (('customer_rigths', 'Global customer rights'), ('vendor_rights', 'Global vendor rights'), ('any_rights', 'Global any rights')),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AssociatedProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('label', models.CharField(max_length=100)),
                ('is_approval_required', models.BooleanField(default=False)),
                ('is_acceptance_email_notification_required', models.BooleanField(default=False)),
                ('acceptance_email_body', models.TextField(blank=True, null=True)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.TextField(default='', max_length=78)),
                ('body', models.TextField(blank=True, default='', max_length=2000)),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('title', models.CharField(max_length=100)),
                ('subtitle', models.CharField(blank=True, max_length=100, null=True)),
                ('widget_icon', models.CharField(blank=True, max_length=100, null=True)),
                ('widget_colour', models.CharField(blank=True, max_length=200, null=True)),
                ('widget_icon_class', models.CharField(blank=True, max_length=100, null=True)),
                ('table_id', models.CharField(max_length=100)),
                ('reverse_url', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='RecordActionButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icon_colour', models.CharField(blank=True, help_text='Colour of the icon', max_length=100, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('label', models.CharField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(blank=True, choices=[('single', 'Single'), ('multi', 'Multiple')], default='single', max_length=100, null=True)),
                ('error_message', models.CharField(blank=True, max_length=100, null=True)),
                ('icon_class', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=100, null=True)),
                ('action', models.CharField(blank=True, help_text='Name of javascript function to be performed on click', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TitleButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('template', models.CharField(max_length=500)),
                ('additional_attr', models.CharField(blank=True, help_text='Additional attributes for the button,format: key1:value1,key2:value2,key3:value3', max_length=500, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ViewLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=2000)),
                ('timeLocked', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orcid_id', models.TextField(blank=True, max_length=40)),
                ('repo_manager', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('repo_submitter', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('active_task', models.BooleanField(default=False)),
                ('cookie_consent_log', django.contrib.postgres.fields.ArrayField(base_field=models.JSONField(default=dict), blank=True, null=True, size=None)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'UserDetails',
            },
        ),
        migrations.CreateModel(
            name='StatusMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField(default='All Tasks Complete', max_length=500)),
                ('message_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='ProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=20, unique=True)),
                ('description', models.CharField(max_length=100)),
                ('widget_colour', models.CharField(blank=True, max_length=200, null=True)),
                ('is_dtol_profile', models.BooleanField(default=False)),
                ('is_permission_required', models.BooleanField(default=True)),
                ('post_save_action', models.CharField(blank=True, max_length=100, null=True)),
                ('pre_save_action', models.CharField(blank=True, max_length=100, null=True)),
                ('associated_profile_types', models.ManyToManyField(blank=True, to='ei_core.associatedprofiletype')),
                ('components', models.ManyToManyField(blank=True, to='ei_core.component')),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.AddField(
            model_name='component',
            name='recordaction_buttons',
            field=models.ManyToManyField(blank=True, to='ei_core.recordactionbutton'),
        ),
        migrations.AddField(
            model_name='component',
            name='title_buttons',
            field=models.ManyToManyField(blank=True, to='ei_core.titlebutton'),
        ),
    ]
